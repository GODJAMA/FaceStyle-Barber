# -*- coding: utf-8 -*-
"""ladmarksinvideo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mcSPfZ3dgP60Ii4EofJkNR05LKXAClwU
"""

import cv2
import dlib
import numpy as np
from imutils import face_utils
import matplotlib.pyplot as plt

# !pip install gitpython

# Downloading  the github repository containing the landmark detection model
# import git
import urllib.request

# shape_predictor_url = "https://github.com/codeniko/shape_predictor_81_face_landmarks"
shape_predictor_path = "/content/shape_predictor_81_face_landmarks"



# #Descarga el contenido que se encuentra en shape_predictor_url y lo guarda en la ubicación especificada en shape_predictor_path
# #urllib.request.urlretrieve(shape_predictor_url, shape_predictor_path)

# git.Repo.clone_from(shape_predictor_url, shape_predictor_path)

# print("Descarga completada:", shape_predictor_path)

# # Cargar el detector de rostros y el predictor de landmarks
detector = dlib.get_frontal_face_detector()
predictor = dlib.shape_predictor("/content/shape_predictor_81_face_landmarks/shape_predictor_81_face_landmarks.dat")

# Capturar video desde la webcam
video_capture = cv2.VideoCapture(0)  # Usa '0' para la cámara predeterminada

while True:
    # Leer un cuadro del video
    ret, frame = video_capture.read()
    if not ret:
        break

    # Convertir a escala de grises para detección de rostros
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detectar rostros
    faces = detector(gray)

    # # Para cada rostro detectado, obtener y dibujar los landmarks
    for face in faces:
        landmarks = predictor(gray, face)
        landmarks_np = face_utils.shape_to_np(landmarks)  # Convertir a coordenadas NumPy

        # Dibujar los puntos de referencia en el rostro
        for (x, y) in landmarks_np:
            cv2.circle(frame, (x, y), 2, (0, 255, 0), -1)  # Punto verde

    # Mostrar el cuadro con los landmarks
    # cv2_imshow(frame)  # Para Google Colab
    cv2.imshow("Video", frame)  # Para entornos locales

    # Salir del bucle si se presiona 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Liberar la captura de video y cerrar las ventanas
video_capture.release()
cv2.destroyAllWindows()